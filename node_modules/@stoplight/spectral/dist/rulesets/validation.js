"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decorateIFunctionWithSchemaValidation = exports.isValidRule = exports.assertValidRuleset = exports.ValidationError = void 0;
const AJV = require("ajv");
const lodash_1 = require("lodash");
const ruleSchema = require("../meta/rule.schema.json");
const rulesetSchema = require("../meta/ruleset.schema.json");
const shared = require("../meta/shared.json");
const ajv = new AJV({ allErrors: true, jsonPointers: true });
const validate = ajv.addSchema(ruleSchema).addSchema(shared).compile(rulesetSchema);
const serializeAJVErrors = (errors) => errors.map(({ message, dataPath }) => `${dataPath} ${message}`).join('\n');
class ValidationError extends AJV.ValidationError {
    constructor(errors) {
        super(errors);
        this.errors = errors;
        this.message = serializeAJVErrors(errors);
    }
}
exports.ValidationError = ValidationError;
function assertValidRuleset(ruleset) {
    var _a;
    if (!lodash_1.isObject(ruleset)) {
        throw new Error('Provided ruleset is not an object');
    }
    if (!('rules' in ruleset) && !('extends' in ruleset)) {
        throw new Error('Ruleset must have rules or extends property');
    }
    if (!validate(ruleset)) {
        throw new ValidationError((_a = validate.errors) !== null && _a !== void 0 ? _a : []);
    }
    return ruleset;
}
exports.assertValidRuleset = assertValidRuleset;
function isValidRule(rule) {
    return typeof rule === 'object' && rule !== null && !Array.isArray(rule) && ('given' in rule || 'then' in rule);
}
exports.isValidRule = isValidRule;
function decorateIFunctionWithSchemaValidation(fn, schema) {
    return (data, opts, ...args) => {
        var _a;
        if (!ajv.validate(schema, opts)) {
            throw new ValidationError((_a = ajv.errors) !== null && _a !== void 0 ? _a : []);
        }
        return fn(data, opts, ...args);
    };
}
exports.decorateIFunctionWithSchemaValidation = decorateIFunctionWithSchemaValidation;
//# sourceMappingURL=validation.js.map