import { Optional } from '@stoplight/types';
import { JSONPathExpression } from 'nimma';
import { IDocument } from './document';
import { IGivenNode, IRule, IThen, SpectralDiagnosticSeverity } from './types';
export declare class Rule {
    readonly name: string;
    readonly description: string | null;
    readonly message: string | null;
    readonly severity: SpectralDiagnosticSeverity;
    readonly resolved: boolean;
    readonly formats: Optional<string[]>;
    readonly then: IThen[];
    readonly given: string[];
    get enabled(): boolean;
    constructor(name: string, rule: IRule);
    matchesFormat(formats: IDocument['formats']): boolean;
}
export declare class OptimizedRule extends Rule {
    readonly expressions: JSONPathExpression[];
    constructor(name: string, rule: IRule);
    hookup(cb: (rule: OptimizedRule, node: IGivenNode) => void): void;
}
