import { IGraphNodeData, IUriParser } from '@stoplight/json-ref-resolver/types';
import { Dictionary, JsonPath } from '@stoplight/types';
import { DepGraph } from 'dependency-graph';
import { Document, IDocument } from './document';
import { IResolver, IRuleResult } from './types';
export declare type DocumentInventoryItem = {
    document: IDocument;
    path: JsonPath;
    missingPropertyPath: JsonPath;
};
export declare class DocumentInventory {
    readonly document: IDocument<unknown>;
    protected resolver: IResolver;
    private static readonly _cachedRemoteDocuments;
    graph: DepGraph<IGraphNodeData> | null;
    resolved: unknown;
    errors: IRuleResult[] | null;
    diagnostics: IRuleResult[];
    readonly referencedDocuments: Dictionary<Document>;
    get source(): string | null;
    get unresolved(): unknown;
    get formats(): string[] | null | undefined;
    constructor(document: IDocument<unknown>, resolver: IResolver);
    resolve(): Promise<void>;
    findAssociatedItemForPath(path: JsonPath, resolved: boolean): DocumentInventoryItem | null;
    protected parseResolveResult: (resolveOpts: IUriParser) => Promise<IUriParser>;
}
