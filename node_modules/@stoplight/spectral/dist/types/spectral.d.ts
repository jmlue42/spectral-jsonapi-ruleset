import { IResolveOpts, IResolveResult } from '@stoplight/json-ref-resolver/types';
import { DiagnosticSeverity, Dictionary, IDiagnostic, JsonPath } from '@stoplight/types';
import { JSONSchema4, JSONSchema6, JSONSchema7 } from 'json-schema';
import { IFunction, IRule } from '.';
import { Rule } from '../rule';
import { ComputeFingerprintFunc } from '../utils';
export declare type FunctionCollection = Dictionary<IFunction<any>, string>;
export declare type RuleCollection = Dictionary<IRule, string>;
export declare type PartialRuleCollection = Dictionary<Partial<IRule>, string>;
export declare type RunRuleCollection = Dictionary<Rule, string>;
export declare type SpectralDiagnosticSeverity = DiagnosticSeverity | -1;
export declare type RuleDeclarationCollection = Dictionary<boolean, string>;
export interface IConstructorOpts {
    resolver?: IResolver;
    computeFingerprint?: ComputeFingerprintFunc;
    useNimma?: boolean;
    proxyUri?: string;
}
export interface IRunOpts {
    ignoreUnknownFormat?: boolean;
    resolve?: {
        documentUri?: string;
    };
}
export interface IRuleResult extends IDiagnostic {
    path: JsonPath;
}
export interface ISpectralFullResult {
    resolved: unknown;
    results: IRuleResult[];
}
export interface IGivenNode {
    path: JsonPath;
    value: any;
}
export declare type ResolveResult = Omit<IResolveResult, 'runner'>;
export interface IResolver {
    resolve(source: unknown, opts?: IResolveOpts): Promise<ResolveResult>;
}
export declare type FormatLookup = (document: unknown, source?: string) => boolean;
export declare type RegisteredFormats = Dictionary<FormatLookup, string>;
export declare type JSONSchema = JSONSchema4 | JSONSchema6 | JSONSchema7;
