import { Dictionary } from '@stoplight/types';
import { DiagnosticSeverity } from '@stoplight/types';
import { HumanReadableDiagnosticSeverity, IRule } from './rule';
import { JSONSchema, RuleCollection } from './spectral';
export declare type FileRuleSeverity = DiagnosticSeverity | HumanReadableDiagnosticSeverity | boolean;
export declare type FileRulesetSeverity = 'off' | 'recommended' | 'all';
export declare type FileRule = IRule | FileRuleSeverity | [FileRuleSeverity] | [FileRuleSeverity, object];
export declare type FileRuleCollection = Dictionary<FileRule, string>;
export interface IRulesetFunctionDefinition {
    code?: string;
    ref?: string;
    schema: JSONSchema | null;
    name: string;
    source: string | null;
}
export declare type RulesetFunctionCollection = Dictionary<IRulesetFunctionDefinition, string>;
export declare type RulesetExceptionCollection = Dictionary<string[], string>;
export interface IParserOptions {
    duplicateKeys?: DiagnosticSeverity | HumanReadableDiagnosticSeverity;
    incompatibleValues?: DiagnosticSeverity | HumanReadableDiagnosticSeverity;
}
export interface IRuleset {
    rules: RuleCollection;
    functions: RulesetFunctionCollection;
    exceptions: RulesetExceptionCollection;
    parserOptions?: IParserOptions;
}
export interface IRulesetFile {
    documentationUrl?: string;
    extends?: Array<string | [string, FileRulesetSeverity]>;
    formats?: string[];
    rules?: FileRuleCollection;
    functionsDir?: string;
    functions?: Array<string | [string, JSONSchema]>;
    except?: RulesetExceptionCollection;
    parserOptions?: IParserOptions;
}
