"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lint = void 0;
const document_1 = require("../../../document");
const formats_1 = require("../../../formats");
const reader_1 = require("../../../fs/reader");
const Parsers = require("../../../parsers");
const spectral_1 = require("../../../spectral");
const utils_1 = require("./utils");
const getResolver_1 = require("./utils/getResolver");
async function lint(documents, flags) {
    const spectral = new spectral_1.Spectral({
        resolver: getResolver_1.getResolver(flags.resolver),
    });
    const ruleset = await utils_1.getRuleset(flags.ruleset);
    spectral.setRuleset(ruleset);
    for (const [format, lookup, prettyName] of formats_1.KNOWN_FORMATS) {
        spectral.registerFormat(format, document => {
            if (lookup(document)) {
                if (flags.quiet !== true) {
                    console.log(`${prettyName} detected`);
                }
                return true;
            }
            return false;
        });
    }
    if (flags.verbose === true) {
        if (ruleset) {
            const rules = Object.values(spectral.rules);
            console.info(`Found ${rules.length} rules (${rules.filter(rule => rule.enabled).length} enabled)`);
        }
        else {
            console.info('No rules loaded, attempting to detect document type');
        }
    }
    if (flags.skipRule !== void 0) {
        spectral.setRules(utils_1.skipRules(ruleset.rules, flags));
    }
    const [targetUris, unmatchedPatterns] = await utils_1.listFiles(documents, !(flags.showUnmatchedGlobs || flags.failOnUnmatchedGlobs));
    const results = [];
    if (unmatchedPatterns.length > 0) {
        if (flags.failOnUnmatchedGlobs) {
            throw new Error(`Unmatched glob patterns: \`${unmatchedPatterns.join(',')}\``);
        }
        for (const unmatchedPattern of unmatchedPatterns) {
            console.log(`Glob pattern \`${unmatchedPattern}\` did not match any files`);
        }
    }
    for (const targetUri of targetUris) {
        if (flags.verbose) {
            console.info(`Linting ${targetUri}`);
        }
        const document = new document_1.Document(await reader_1.readParsable(targetUri, { encoding: flags.encoding }), Parsers.Yaml, typeof targetUri === 'number' ? document_1.STDIN : targetUri);
        results.push(...(await spectral.run(document, {
            ignoreUnknownFormat: flags.ignoreUnknownFormat,
            resolve: {
                documentUri: typeof targetUri === 'number' ? void 0 : targetUri,
            },
        })));
    }
    return results;
}
exports.lint = lint;
//# sourceMappingURL=linter.js.map