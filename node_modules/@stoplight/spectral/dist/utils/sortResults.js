"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sortResults = exports.compareResults = exports.comparePosition = void 0;
const compareCode = (left, right) => {
    if (left === void 0 && right === void 0) {
        return 0;
    }
    if (left === void 0) {
        return -1;
    }
    if (right === void 0) {
        return 1;
    }
    return String(left).localeCompare(String(right), void 0, { numeric: true });
};
const compareSource = (left, right) => {
    if (left === void 0 && right === void 0) {
        return 0;
    }
    if (left === void 0) {
        return -1;
    }
    if (right === void 0) {
        return 1;
    }
    return left.localeCompare(right);
};
const normalize = (value) => {
    if (value < 0) {
        return -1;
    }
    if (value > 0) {
        return 1;
    }
    return 0;
};
exports.comparePosition = (left, right) => {
    const diffLine = left.line - right.line;
    if (diffLine !== 0) {
        return normalize(diffLine);
    }
    const diffChar = left.character - right.character;
    return normalize(diffChar);
};
exports.compareResults = (left, right) => {
    const diffSource = compareSource(left.source, right.source);
    if (diffSource !== 0) {
        return normalize(diffSource);
    }
    const diffStart = exports.comparePosition(left.range.start, right.range.start);
    if (diffStart !== 0) {
        return diffStart;
    }
    const diffCode = compareCode(left.code, right.code);
    if (diffCode !== 0) {
        return normalize(diffCode);
    }
    const diffPath = left.path.join().localeCompare(right.path.join());
    return normalize(diffPath);
};
exports.sortResults = (results) => {
    return [...results].sort(exports.compareResults);
};
//# sourceMappingURL=sortResults.js.map