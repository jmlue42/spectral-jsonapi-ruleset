"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.casing = exports.CasingType = void 0;
const lodash_1 = require("lodash");
var CasingType;
(function (CasingType) {
    CasingType["flat"] = "flat";
    CasingType["camel"] = "camel";
    CasingType["pascal"] = "pascal";
    CasingType["kebab"] = "kebab";
    CasingType["cobol"] = "cobol";
    CasingType["snake"] = "snake";
    CasingType["macro"] = "macro";
})(CasingType = exports.CasingType || (exports.CasingType = {}));
const CASES = {
    [CasingType.flat]: '[a-z][a-z{__DIGITS__}]*',
    [CasingType.camel]: '[a-z][a-z{__DIGITS__}]*(?:[A-Z{__DIGITS__}][a-z{__DIGITS__}]+)*',
    [CasingType.pascal]: '[A-Z][a-z{__DIGITS__}]*(?:[A-Z{__DIGITS__}][a-z{__DIGITS__}]+)*',
    [CasingType.kebab]: '[a-z][a-z{__DIGITS__}]*(?:-[a-z{__DIGITS__}]+)*',
    [CasingType.cobol]: '[A-Z][A-Z{__DIGITS__}]*(?:-[A-Z{__DIGITS__}]+)*',
    [CasingType.snake]: '[a-z][a-z{__DIGITS__}]*(?:_[a-z{__DIGITS__}]+)*',
    [CasingType.macro]: '[A-Z][A-Z{__DIGITS__}]*(?:_[A-Z{__DIGITS__}]+)*',
};
exports.casing = (targetVal, opts) => {
    if (typeof targetVal !== 'string' || targetVal.length === 0) {
        return;
    }
    if (targetVal.length === 1 &&
        opts.separator !== void 0 &&
        opts.separator.allowLeading === true &&
        targetVal === opts.separator.char) {
        return;
    }
    const casingValidator = buildFrom(CASES[opts.type], opts);
    if (casingValidator.test(targetVal)) {
        return;
    }
    return [
        {
            message: `must be ${opts.type} case`,
        },
    ];
};
const DIGITS_PATTERN = '0-9';
const buildFrom = (basePattern, overrides) => {
    const injectDigits = overrides.disallowDigits !== true;
    const pattern = basePattern.replace(/\{__DIGITS__\}/g, injectDigits ? DIGITS_PATTERN : '');
    if (overrides.separator === undefined) {
        return new RegExp(`^${pattern}$`);
    }
    const separatorPattern = `[${lodash_1.escapeRegExp(overrides.separator.char)}]`;
    const leadingSeparatorPattern = overrides.separator.allowLeading === true ? `${separatorPattern}?` : '';
    return new RegExp(`^${leadingSeparatorPattern}${pattern}(?:${separatorPattern}${pattern})*$`);
};
//# sourceMappingURL=casing.js.map