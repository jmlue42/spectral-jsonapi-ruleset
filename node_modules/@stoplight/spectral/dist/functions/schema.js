"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const AJV = require("ajv");
const jsonSpecV4 = require("ajv/lib/refs/json-schema-draft-04.json");
const jsonSpecV6 = require("ajv/lib/refs/json-schema-draft-06.json");
const jsonSpecV7 = require("ajv/lib/refs/json-schema-draft-07.json");
const betterAjvErrors = require("@stoplight/better-ajv-errors");
const oasFormatValidator = require('ajv-oai/lib/format-validator');
const logger = {
    warn(...args) {
        const firstArg = args[0];
        if (typeof firstArg === 'string') {
            if (firstArg.startsWith('unknown format'))
                return;
            console.warn(...args);
        }
    },
    log: console.log,
    error: console.error,
};
const ajvInstances = {};
function getAjv(oasVersion, allErrors) {
    const type = oasVersion !== void 0 && oasVersion >= 2 ? 'oas' + oasVersion : 'jsonschema';
    if (typeof ajvInstances[type] !== 'undefined') {
        return ajvInstances[type];
    }
    const ajvOpts = {
        meta: true,
        schemaId: 'auto',
        allErrors,
        jsonPointers: true,
        unknownFormats: 'ignore',
        nullable: oasVersion === 3,
        logger,
    };
    const ajv = exports.schema.createAJVInstance(ajvOpts);
    ajv.addMetaSchema(jsonSpecV4);
    ajv.addMetaSchema(jsonSpecV6);
    ajv._opts.defaultMeta = jsonSpecV4.id;
    ajv._refs['http://json-schema.org/schema'] = 'http://json-schema.org/draft-04/schema';
    ajvInstances[type] = ajv;
    return ajv;
}
function getSchemaId(schemaObj) {
    if ('$id' in schemaObj) {
        return schemaObj.$id;
    }
    if ('id' in schemaObj) {
        return schemaObj.id;
    }
}
const validators = new (class extends WeakMap {
    get({ schema: schemaObj, oasVersion, allErrors }) {
        const ajv = getAjv(oasVersion, allErrors);
        const schemaId = getSchemaId(schemaObj);
        let validator;
        try {
            validator = schemaId !== void 0 ? ajv.getSchema(schemaId) : void 0;
        }
        catch (_a) {
            validator = void 0;
        }
        if (validator !== void 0) {
            return validator;
        }
        validator = super.get(schemaObj);
        if (validator === void 0) {
            validator = ajv.compile(schemaObj);
            super.set(schemaObj, validator);
        }
        return validator;
    }
})();
exports.schema = (targetVal, opts, paths, { rule }) => {
    var _a, _b, _c;
    const path = (_a = paths.target) !== null && _a !== void 0 ? _a : paths.given;
    if (targetVal === void 0) {
        return [
            {
                path,
                message: `#{{print("property")}}does not exist`,
            },
        ];
    }
    const results = [];
    const { schema: schemaObj } = opts;
    try {
        const validator = (_b = opts.ajv) !== null && _b !== void 0 ? _b : validators.get(opts);
        if (validator(targetVal) === false && Array.isArray(validator.errors)) {
            (_c = opts.prepareResults) === null || _c === void 0 ? void 0 : _c.call(opts, validator.errors);
            results.push(...betterAjvErrors(schemaObj, validator.errors, {
                propertyPath: path,
                targetValue: targetVal,
            }).map(({ suggestion, error, path: errorPath }) => ({
                message: suggestion !== void 0 ? `${error}. ${suggestion}` : error,
                path: [...path, ...(errorPath !== '' ? errorPath.replace(/^\//, '').split('/') : [])],
            })));
        }
    }
    catch (ex) {
        if (!(ex instanceof AJV.MissingRefError)) {
            throw ex;
        }
        else if (!rule.resolved) {
            results.push({
                message: ex.message,
                path,
            });
        }
    }
    return results;
};
exports.schema.Ajv = AJV;
exports.schema.createAJVInstance = (opts) => {
    const ajv = new AJV(opts);
    ajv.addFormat('int32', { type: 'number', validate: oasFormatValidator.int32 });
    ajv.addFormat('int64', { type: 'number', validate: oasFormatValidator.int64 });
    ajv.addFormat('float', { type: 'number', validate: oasFormatValidator.float });
    ajv.addFormat('double', { type: 'number', validate: oasFormatValidator.double });
    ajv.addFormat('byte', { type: 'string', validate: oasFormatValidator.byte });
    return ajv;
};
exports.schema.specs = {
    v4: jsonSpecV4,
    v6: jsonSpecV6,
    v7: jsonSpecV7,
};
//# sourceMappingURL=schema.js.map