"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.alphabetical = void 0;
const lodash_1 = require("lodash");
const compare = (a, b) => {
    if ((typeof a === 'number' || Number.isNaN(Number(a))) && (typeof b === 'number' || !Number.isNaN(Number(b)))) {
        return Math.min(1, Math.max(-1, Number(a) - Number(b)));
    }
    if (typeof a !== 'string' || typeof b !== 'string') {
        return 0;
    }
    return a.localeCompare(b);
};
const getUnsortedItems = (arr, compareFn) => {
    for (let i = 0; i < arr.length - 1; i += 1) {
        if (compareFn(arr[i], arr[i + 1]) >= 1) {
            return [i, i + 1];
        }
    }
    return null;
};
exports.alphabetical = (targetVal, opts, paths, { documentInventory }) => {
    var _a, _b, _c;
    if (!lodash_1.isObject(targetVal))
        return;
    let targetArray;
    if (Array.isArray(targetVal)) {
        targetArray = targetVal;
    }
    else {
        targetVal = (_b = (_a = documentInventory.findAssociatedItemForPath(paths.given, true)) === null || _a === void 0 ? void 0 : _a.document.trapAccess(targetVal)) !== null && _b !== void 0 ? _b : targetVal;
        targetArray = Object.keys(targetVal);
    }
    if (targetArray.length < 2) {
        return;
    }
    const keyedBy = opts === null || opts === void 0 ? void 0 : opts.keyedBy;
    const unsortedItems = getUnsortedItems(targetArray, keyedBy !== void 0
        ? (a, b) => {
            if (!lodash_1.isObject(a) || !lodash_1.isObject(b))
                return 0;
            return compare(a[keyedBy], b[keyedBy]);
        }
        :
            compare);
    if (unsortedItems != null) {
        const path = (_c = paths.target) !== null && _c !== void 0 ? _c : paths.given;
        return [
            Object.assign(Object.assign({}, (keyedBy === void 0
                ? {
                    path: [...path, Array.isArray(targetVal) ? unsortedItems[0] : targetArray[unsortedItems[0]]],
                }
                : null)), { message: keyedBy !== void 0
                    ? 'properties are not in alphabetical order'
                    : `at least 2 properties are not in alphabetical order: "${targetArray[unsortedItems[0]]}" should be placed after "${targetArray[unsortedItems[1]]}"` }),
        ];
    }
    return;
};
//# sourceMappingURL=alphabetical.js.map